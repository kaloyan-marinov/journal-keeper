FROM node:14 AS build-stage

WORKDIR /journal-keeper/backend

ENV PATH /journal-keeper/backend/node_modules/.bin:$PATH

# While Compose always starts and stops containers in "dependency order",
# it does not wait until a container is "ready".
# Work around the problem by means of the following wrapper script:
RUN wget https://github.com/eficode/wait-for/releases/download/v2.1.3/wait-for
RUN chmod +x wait-for
# Make sure netcat is installed in your Dockerfile before running the command
# if you test over plain TCP.
RUN apt-get -q update \
 && apt-get -qy install netcat

# Install Node.js dependencies.
COPY backend/package.json ./
RUN npm install

# Copy files, which are needed for running the database migration scripts
COPY backend/tsconfig.json ./
COPY backend/ormconfig.ts ./

# Bundle the backend source
RUN mkdir src
COPY backend/src ./src/

RUN npm run build



FROM node:14 AS prod-stage

WORKDIR /journal-keeper/backend

# While Compose always starts and stops containers in "dependency order",
# it does not wait until a container is "ready".
# Work around the problem by means of the following wrapper script:
RUN wget https://github.com/eficode/wait-for/releases/download/v2.1.3/wait-for
RUN chmod +x wait-for
# Make sure netcat is installed in your Dockerfile before running the command
# if you test over plain TCP.
RUN apt-get -q update \
 && apt-get -qy install netcat

COPY --from=build-stage \
    /journal-keeper/backend/wait-for \
    /journal-keeper/backend/

RUN mkdir node_modules
COPY --from=build-stage \
    /journal-keeper/backend/node_modules \
    /journal-keeper/backend/node_modules

RUN mkdir dist
COPY --from=build-stage \
    /journal-keeper/backend/dist \
    /journal-keeper/backend/dist

EXPOSE 5000
